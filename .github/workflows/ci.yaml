# purpose: run Continuous Integration (build, unit test, lint, scan)
# actions:
#   - https://github.com/marketplace/actions/checkout  
#   - https://github.com/marketplace/actions/setup-net-core-sdk
#   - https://github.com/actions/setup-java
#   - https://github.com/marketplace/actions/aqua-security-trivy
#   - https://github.com/marketplace/actions/neuvector-vulnerability-scan-action
# images:
#   - https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md
# variables:
#   - DOCKERHUB_NAMESPACE
#   - SONAR_ORG
#   - SONAR_PROJECT_KEY
#   - USE_NEUVECTOR
#   - USE_TRIVY
# secrets:
#   - DOCKERHUB_TOKEN
#   - DOCKERHUB_USERNAME
#   - SONAR_TOKEN

name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v5
      - name: Install .NET 9.0
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 9.0.x
      - name: Restore .NET packages
        run: dotnet restore
      - name: Lint .NET code
        run: dotnet format --verify-no-changes --severity warn --verbosity:diagnostic
      - name: Install Java 21 # required by Sonar scanner
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Install .NET global tools (Sonar Scanner for .NET)
        run: |
          export PATH="$PATH:/root/.dotnet/tools"
          dotnet tool install --global dotnet-sonarscanner
      - name: Install & start MongoDB 8.0
        run: |
          # follows documentation (https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/)
          curl -fsSL https://www.mongodb.org/static/pgp/server-8.0.asc | \
           sudo gpg -o /usr/share/keyrings/mongodb-server-8.0.gpg \
           --dearmor
          echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] https://repo.mongodb.org/apt/ubuntu noble/mongodb-org/8.0 multiverse" | \
            sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-org
          sudo systemctl start mongod
      - name: Start code analysis
        run: dotnet sonarscanner begin /k:"$SONAR_PROJECT_KEY" /o:"$SONAR_ORG" /n:"Sales Portal" /d:sonar.login="$SONAR_TOKEN"
      - name: Build .NET solution
        run: dotnet build --no-restore
      - name: Run tests
        run: dotnet test --no-build --verbosity normal
      - name: Stop code analysis
        run: dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
      - name: Stop MongoDB
        run: sudo systemctl stop mongod
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_ORG: ${{ vars.SONAR_ORG }}
      SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  image-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v5
      - name: Build front container image
        run: |
          docker build . --file src/BlazorWasmApp/Dockerfile --tag $CONTAINER_REGITRY_DOMAIN/$IMAGE_FOLDER/salesportal-wasmapp:${{ env.IMAGE_TAG }}
      - name: Scan front container image with NeuVector
        if: ${{ vars.USE_NEUVECTOR == 'true' }}
        uses: neuvector/scan-action@main
        with:
          image-repository: ${{ env.CONTAINER_REGITRY_DOMAIN }}/${{ env.IMAGE_FOLDER }}/salesportal-wasmapp
          image-tag: ${{ env.IMAGE_TAG }}
          min-high-cves-to-fail: "1"
          min-medium-cves-to-fail: "1"
      - name: Scan front container image with Trivy
        if: ${{ vars.USE_TRIVY == 'true' }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.CONTAINER_REGITRY_DOMAIN }}/${{ env.IMAGE_FOLDER }}/salesportal-wasmapp:${{ env.IMAGE_TAG }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Build CRM adapter container image
        run: |
          docker build . --file src/CrmAdapterWebApi/Dockerfile --tag $CONTAINER_REGITRY_DOMAIN/$IMAGE_FOLDER/salesportal-crmadapterwebapi:${{ env.IMAGE_TAG }}
      - name: Scan CRM adapter container image with NeuVector
        if: ${{ vars.USE_NEUVECTOR == 'true' }}
        uses: neuvector/scan-action@main
        with:
          image-repository: ${{ env.CONTAINER_REGITRY_DOMAIN }}/${{ env.IMAGE_FOLDER }}/salesportal-crmadapterwebapi
          image-tag: ${{ env.IMAGE_TAG }}
          min-high-cves-to-fail: "1"
          min-medium-cves-to-fail: "1"
      - name: Scan CRM adapter container image with Trivy
        if: ${{ vars.USE_TRIVY == 'true' }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.CONTAINER_REGITRY_DOMAIN }}/${{ env.IMAGE_FOLDER }}/salesportal-crmadapterwebapi:${{ env.IMAGE_TAG }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Build CRM data container image
        run: |
          docker build . --file src/CrmDataWebApi/Dockerfile --tag $CONTAINER_REGITRY_DOMAIN/$IMAGE_FOLDER/salesportal-crmdatawebapi:${{ env.IMAGE_TAG }}
      - name: Scan CRM data container image with NeuVector
        if: ${{ vars.USE_NEUVECTOR == 'true' }}
        uses: neuvector/scan-action@main
        with:
          image-repository: ${{ env.CONTAINER_REGITRY_DOMAIN }}/${{ env.IMAGE_FOLDER }}/salesportal-crmdatawebapi
          image-tag: ${{ env.IMAGE_TAG }}
          min-high-cves-to-fail: "1"
          min-medium-cves-to-fail: "1"
      - name: Scan CRM Data container image with Trivy
        if: ${{ vars.USE_TRIVY == 'true' }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.CONTAINER_REGITRY_DOMAIN }}/${{ env.IMAGE_FOLDER }}/salesportal-crmdatawebapi:${{ env.IMAGE_TAG }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CONTAINER_REGITRY_DOMAIN: docker.io
      IMAGE_FOLDER: ${{ vars.DOCKERHUB_NAMESPACE }}
      IMAGE_TAG: 1.1.${{ github.run_id }}
