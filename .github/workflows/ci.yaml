# purpose: run Continuous Integration (build, unit test, lint, scan)
# actions: []
# images:
#   - https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
# variables:
#   - DOCKERHUB_NAMESPACE
#   - SONAR_HOST_URL
#   - SONAR_ORG
#   - SONAR_PROJECT_KEY
# secrets:
#   - SONAR_TOKEN

name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

concurrency:
  group: "ci"
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Install .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Install .NET linters
        run: dotnet tool install -g dotnet-format --version "7.*" --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json
      - name: Restore .NET packages
        run: dotnet restore
      - name: Lint .NET code
        run: dotnet-format --verify-no-changes --severity warn --verbosity:diagnostic
      - name: Install SonarQube
        run: |
          sudo apt-get install --yes openjdk-11-jre
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:/root/.dotnet/tools"
      # follows documentation (https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/)
      - name: Install & start MongoDB
        run: |
          curl -fsSL https://pgp.mongodb.com/server-6.0.asc | \
            sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg \
            --dearmor
          echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | \
            sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-org
          sudo systemctl start mongod
      - name: Start code analysis
        run: dotnet sonarscanner begin /k:"$SONAR_PROJECT_KEY" /o:"$SONAR_ORG" /d:sonar.login="$SONAR_TOKEN" /d:"sonar.host.url=$SONAR_HOST_URL"
      - name: Build .NET solution
        run: dotnet build --no-restore
      - name: Run tests
        run: dotnet test --no-build --verbosity normal
      - name: Stop code analysis
        run: dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
      - name: Stop MongoDB
        run: sudo systemctl stop mongod
      - name: Build container images
        run: |
            docker build . --file src/BlazorWasmApp/Dockerfile --tag $IMAGE_FOLDER/salesportal-wasmapp:${{ env.IMAGE_TAG }}
            docker build . --file src/CrmAdapterWebApi/Dockerfile --tag $IMAGE_FOLDER/salesportal-crmadapterwebapi:${{ env.IMAGE_TAG }}
            docker build . --file src/CrmDataWebApi/Dockerfile --tag $IMAGE_FOLDER/salesportal-crmdatawebapi:${{ env.IMAGE_TAG }}
      - name: Scan Front container image
        uses: neuvector/scan-action@main
        with:
          image-repository: $IMAGE_FOLDER/salesportal-wasmapp
          image-tag: ${{ env.IMAGE_TAG }}
          min-high-cves-to-fail: "1"
          min-medium-cves-to-fail: "1"
      - name: Scan CRM Adapter container image
        uses: neuvector/scan-action@main
        with:
          image-repository: $IMAGE_FOLDER/salesportal-crmadapterwebapi
          image-tag: ${{ env.IMAGE_TAG }}
          min-high-cves-to-fail: "1"
          min-medium-cves-to-fail: "1"
      - name: Scan CRM Data container image
        uses: neuvector/scan-action@main
        with:
          image-repository: $IMAGE_FOLDER/salesportal-crmdatawebapi
          image-tag: ${{ env.IMAGE_TAG }}
          min-high-cves-to-fail: "1"
          min-medium-cves-to-fail: "1"
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      IMAGE_FOLDER: ${{ vars.DOCKERHUB_NAMESPACE }}
      IMAGE_TAG: 1.0.${GITHUB_RUN_ID}
      SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
      SONAR_ORG: ${{ vars.SONAR_ORG }}
      SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
